@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
using Microsoft.AspNetCore.Mvc;
using ApplicationCore.IServices.Generic;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@if (namespaceName == "Infrastructure.Context") { continue; };
@:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace
{
@{
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
}
    [Route("api/[controller]")]
    [ApiController]
    public class @Model.ControllerName : ControllerBase
    {
        private readonly IGenericService<@(Model.ModelTypeName)> _genericService;

        public @(Model.ControllerName)(IGenericService<@(Model.ModelTypeName)> genericService)
        {
            _genericService = genericService;
        }

        
        [HttpGet]
        public async Task<List<@(Model.ModelTypeName)>> Get()
        {
            return await _genericService.GetList();
        }

        
        [HttpGet("{id}")]
        public async Task<ActionResult<@(Model.ModelTypeName)>> Get(@primaryKeyShortTypeName id)
        {
            var @Model.ModelVariable = await _genericService.GetOrNull(id);
            if (@Model.ModelVariable == null)
                return NotFound();
            return @Model.ModelVariable;
        }


        [HttpPost]
        public async Task<IActionResult> Post(@Model.ModelTypeName @Model.ModelVariable)
        {
            var response = await _genericService.Create(@Model.ModelVariable);
            if (response.Success == false)
                return UnprocessableEntity();
            return Ok();
        }

        
        [HttpPut("{id}")]
        public async Task<IActionResult> Put(@primaryKeyShortTypeName id, @Model.ModelTypeName @Model.ModelVariable)
        {
            var response = await _genericService.Update(@Model.ModelVariable);
            if (response.Success == false)
                return UnprocessableEntity();
            return Ok();
        }

        
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(@primaryKeyShortTypeName id)
        {
            var response = await _genericService.Delete(id);
            if (response.Success == false)
                return UnprocessableEntity();
            return Ok();
        }
    }
}